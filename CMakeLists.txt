CMAKE_MINIMUM_REQUIRED(VERSION 3.13.4)

PROJECT(lua-protobuf)

INCLUDE_DIRECTORIES(
        "${LUA_INCLUDE_DIR}"
)

SET(SOURCE_FILE pb.c)

SET(CMAKE_DEBUG_POSTFIX "d" CACHE STRING "Set debug library postfix" FORCE)
SET(CMAKE_RELEASE_POSTFIX "" CACHE STRING "Set release library postfix" FORCE)

MESSAGE(STATUS "CMAKE_C_COMPILER_ID = ${CMAKE_C_COMPILER_ID}")
IF (CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
ELSEIF (CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
    SET(PROJECT_FLAGS_COMMON "-Wall -D__STDC_FORMAT_MACROS -fno-builtin-malloc -fno-builtin-calloc -fno-builtin-realloc -fno-builtin-free")
    SET(PROJECT_CXX_FLAGS_COMMON "${PROJECT_FLAGS_COMMON} -fpermissive")
    SET(PROJECT_C_FLAGS_COMMON "${PROJECT_FLAGS_COMMON}")

    SET(PROJECT_CXX_FLAGS_DEBUG "${PROJECT_CXX_FLAGS_COMMON} -g -O0 -DUndefined symbols for architecture x86_64_DEBUG -DCHECK_MEM_LEAK")
    SET(PROJECT_CXX_FLAGS_RELEASE "${PROJECT_CXX_FLAGS_COMMON} -g0 -O2 -DNDEBUG")

    SET(PROJECT_C_FLAGS_DEBUG "${PROJECT_C_FLAGS_COMMON} -g -O0 -D_DEBUG -DCHECK_MEM_LEAK")
    SET(PROJECT_C_FLAGS_RELEASE "${PROJECT_C_FLAGS_COMMON} -g0 -O2 -DNDEBUG")
ELSEIF (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    SET(PROJECT_FLAGS_COMMON "-fexceptions -fPIC -Wall -D__STDC_FORMAT_MACROS -fno-builtin-malloc -fno-builtin-calloc -fno-builtin-realloc -fno-builtin-free") #-D_GLIBCXX_USE_CXX11_ABI=0
    SET(PROJECT_CXX_FLAGS_COMMON "${PROJECT_FLAGS_COMMON} -fpermissive")
    SET(PROJECT_C_FLAGS_COMMON "${PROJECT_FLAGS_COMMON}")

    SET(PROJECT_CXX_FLAGS_DEBUG "${PROJECT_CXX_FLAGS_COMMON} -g3 -O0 -D_DEBUG -DCHECK_MEM_LEAK")
    SET(PROJECT_CXX_FLAGS_RELEASE "${PROJECT_CXX_FLAGS_COMMON} -g0 -O2 -DNDEBUG")

    SET(PROJECT_C_FLAGS_DEBUG "${PROJECT_C_FLAGS_COMMON} -g3 -O0 -D_DEBUG -DCHECK_MEM_LEAK")
    SET(PROJECT_C_FLAGS_RELEASE "${PROJECT_C_FLAGS_COMMON} -g0 -O2 -DNDEBUG")
ELSEIF (CMAKE_CXX_COMPILER_ID STREQUAL "Intel")
ELSEIF (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    SET(PROJECT_FLAGS_COMMON "-GF -MP -EHsc -Gd -W3 -D_CRT_SECURE_NO_WARNINGS")
    SET(PROJECT_CXX_FLAGS_COMMON "${PROJECT_FLAGS_COMMON}")
    SET(PROJECT_C_FLAGS_COMMON "${PROJECT_FLAGS_COMMON}")

    SET(PROJECT_CXX_FLAGS_DEBUG "${PROJECT_CXX_FLAGS_COMMON} -Z7 -MTd -Ob0 -Od -RTC1 -D_DEBUG -DCHECK_MEM_LEAK")
    SET(PROJECT_CXX_FLAGS_RELEASE "${PROJECT_CXX_FLAGS_COMMON} -MT -Ob2 -O2 -DNDEBUG")

    SET(PROJECT_C_FLAGS_DEBUG "${PROJECT_C_FLAGS_COMMON} -Z7 -MTd -Ob0 -Od -RTC1 -D_DEBUG -DCHECK_MEM_LEAK")
    SET(PROJECT_C_FLAGS_RELEASE "${PROJECT_C_FLAGS_COMMON} -MT -Ob2 -O2 -DNDEBUG")
ENDIF ()

SET(CMAKE_C_FLAGS_DEBUG "${PROJECT_C_FLAGS_DEBUG}" CACHE STRING "Set debug build flags" FORCE)
SET(CMAKE_C_FLAGS_RELEASE "${PROJECT_C_FLAGS_RELEASE}" CACHE STRING "Set relese build flags" FORCE)

IF(CMAKE_HOST_SYSTEM_NAME STREQUAL "Linux")
    SET(PROJECT_DEFINES "-DOS_LINUX")
ELSEIF(CMAKE_HOST_SYSTEM_NAME STREQUAL "Windows")
    SET(PROJECT_DEFINES "-DWIN32 -DOS_Windows")
ELSEIF(CMAKE_HOST_SYSTEM_NAME STREQUAL "Darwin")
    SET(PROJECT_DEFINES "-DDarwin -DOS_Darwin")
ELSE()
    SET(PROJECT_DEFINES )
ENDIF()
ADD_DEFINITIONS(${PROJECT_DEFINES})

ADD_LIBRARY(${PROJECT_NAME} STATIC ${SOURCE_FILE} )

TARGET_INCLUDE_DIRECTORIES(${PROJECT_NAME} PUBLIC
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>
        $<INSTALL_INTERFACE:include>
        )

INSTALL(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}_export
        RUNTIME DESTINATION bin
        ARCHIVE DESTINATION lib
        LIBRARY DESTINATION lib
        INCLUDES DESTINATION include
        )

INSTALL(EXPORT ${PROJECT_NAME}_export
        FILE ${PROJECT_NAME}Config.cmake
        DESTINATION lib/cmake/${PROJECT_NAME}
        )

INSTALL(FILES
        pb.h
        DESTINATION include/lua-protobuf
        )